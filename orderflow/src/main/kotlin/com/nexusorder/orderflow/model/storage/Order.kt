package com.nexusorder.orderflow.model.storage

import com.nexusorder.orderflow.constant.DeliveryStatus
import com.nexusorder.orderflow.constant.OrderStatus
import com.nexusorder.orderflow.constant.PaymentMethod
import com.nexusorder.orderflow.constant.PaymentStatus
import com.nexusorder.orderflow.constant.RefundStatus
import com.nexusorder.orderflow.model.payload.OrderRequest
import com.nexusorder.orderflow.util.DataTimeUtil
import com.nexusorder.orderflow.util.UUIDUtil
import com.nexusorder.orderflow.util.storage.OrderProductListConverter
import com.nexusorder.orderflow.util.storage.OrderRefundConverter
import org.springframework.data.annotation.Version
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedUuid
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbAttribute
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbConvertedBy
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSecondaryPartitionKey

@DynamoDbBean
data class Order(
    @get:DynamoDbAttribute("memberId")
    @get:DynamoDbSecondaryPartitionKey(indexNames = ["memberId-index"])
    var memberId: String = "",
    @get:DynamoDbAttribute("shopId")
    @get:DynamoDbSecondaryPartitionKey(indexNames = ["shopId-index"])
    var shopId: String = "",
    @get:DynamoDbAttribute("products")
    @get:DynamoDbConvertedBy(OrderProductListConverter::class)
    var products: List<OrderProduct> = emptyList(),
    @get:DynamoDbAttribute("status")
    var status: OrderStatus = OrderStatus.PENDING,
    @get:DynamoDbAttribute("reviewId")
    @get:DynamoDbSecondaryPartitionKey(indexNames = ["reviewId-index"])
    var reviewId: String = "-1",
    @get:DynamoDbAttribute("deliveryAddress")
    var deliveryAddress: String = "",
    @get:DynamoDbAttribute("deliveryPhone")
    var deliveryPhone: String = "",
    @get:DynamoDbAttribute("deliveredTime")
    var deliveredTime: String = "",
    @get:DynamoDbAttribute("deliveryFee")
    var deliveryFee: Long = 0,
    @get:DynamoDbAttribute("grandTotal")
    var grandTotal: Long = 0,
    @get:DynamoDbAttribute("paymentMethod")
    var paymentMethod: PaymentMethod = PaymentMethod.EMPTY,
    @get:DynamoDbAttribute("paymentStatus")
    var paymentStatus: PaymentStatus = PaymentStatus.PENDING,
    @get:DynamoDbAttribute("deliveryStatus")
    var deliveryStatus: DeliveryStatus = DeliveryStatus.PENDING,
    @get:DynamoDbAttribute("refund")
    @get:DynamoDbConvertedBy(OrderRefundConverter::class)
    var refund: Refund = Refund(),
    @get:DynamoDbAttribute("id")
    @get:DynamoDbPartitionKey
    @get:DynamoDbAutoGeneratedUuid
    override var id: String = UUIDUtil.generateUuid(),
    @get:DynamoDbAttribute("version")
    // @get:DynamoDbVersionAttribute
    @field:Version
    override var version: Long = 0L,
    @get:DynamoDbAttribute("createdAt")
    override var createdAt: String = DataTimeUtil.getCurrentDatetime(),
    @get:DynamoDbAttribute("updatedAt")
    override var updatedAt: String = DataTimeUtil.getCurrentDatetime()
) : AbstractCoreModel() {

    data class OrderProduct(
        var productId: String = "",
        var quantity: Long = 0,
        var price: Long = 0,
    ) {
        companion object {
            fun from(request: OrderRequest.OrderProductRequest, price: Long): OrderProduct {
                return OrderProduct(
                    productId = request.productId,
                    quantity = request.quantity,
                    price = price
                )
            }
        }
    }

    data class Refund(
        var refundStatus: RefundStatus = RefundStatus.PENDING,
        var refundReason: String = "",
        var refundRequestedDatetime: String = "",
        var refundCompletedDatetime: String = "",
        var refundPaymentMethod: PaymentMethod = PaymentMethod.EMPTY,
        var refundAmount: Int = 0,
        var refundAccount: String = "",
        var refundBank: String = "",
    )

    companion object {
        fun from(request: OrderRequest, shop: Shop, products: List<Product>, member: Member): Order {
            return Order(
                shopId = request.shopId,
                products = request.products.map {
                    OrderProduct.from(
                        it,
                        products.find { product -> product.id == it.productId }?.price ?: 0L
                    )
                },
                deliveryFee = shop.deliveryFee,
                grandTotal = request.products.sumOf {
                    it.quantity * (products.find { product -> product.id == it.productId }?.price ?: 0L)
                } + shop.deliveryFee,
                deliveryAddress = member.address,
                deliveryPhone = member.phone
            )
        }
    }
}
